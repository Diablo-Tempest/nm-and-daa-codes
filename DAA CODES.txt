1) BINARY SEARCH ALGORITHM.
CODE:
#include<stdio.h>
int binarySearch(int[],int,int,int);
int main()
{
int c,first,last,n,search,array[100],index;
printf("Enter the number of elements:\n");
scanf("%d",&n);
printf("Enter %d integers:\n",n);
for(c=0;c<n;c++)
scanf("%d",&array[c]);
printf("Enter the value to find:\n");
scanf("%d",&search);
first=0;
last=n-1;
index=binarySearch(array,first,last,search);
if (index==-1)
printf("Not Found! %d isn't present in the list.\n",search,index+1);
return 0;
}
int binarySearch(int a[],int s,int e,int f)
{
int m;
if (s>e)
return-1;
m=(s+e)/2;
if(a[m]==f)
return m;
else if(f>a[m])
return binarySearch(a,m+1,e,f);
else
return binarySearch(a,s,m-1,f);
}




2) MERGE SORT ALGORITHM.
CODE:
#include <stdio.h>
void mergeSort(int [], int, int, int);
void partition(int [],int, int);
int main()
{
 int list[50];
 int i, size;
 printf("Enter total number of elements:");
 scanf("%d", &size);
 printf("Enter the elements:\n");
 for(i = 0; i < size; i++)
 {
 scanf("%d", &list[i]);
 }
 partition(list, 0, size - 1);
 printf("After merge sort:\n");
 for(i = 0;i < size; i++)
 {
 printf("%d ",list[i]);
 }
 return 0;
}
void partition(int list[],int low,int high)
{
 int mid;
 if(low < high)
 {
 mid = (low + high) / 2;
 partition(list, low, mid);
 partition(list, mid + 1, high);
 mergeSort(list, low, mid, high);
 }
}
void mergeSort(int list[],int low,int mid,int high)
{
 int i, mi, k, lo, temp[50];
 lo = low;
 i = low;
 mi = mid + 1;
 while ((lo <= mid) && (mi <= high))
 {
 if (list[lo] <= list[mi])
 {
 temp[i] = list[lo];
 lo++;
 }
 else
 {
 temp[i] = list[mi];
 mi++;
 }
 i++;
 }
 if (lo > mid)
 {
 for (k = mi; k <= high; k++)
 {
 temp[i] = list[k];
 i++;
 }
 }
 else
 {
 for (k = lo; k <= mid; k++)
 {
 temp[i] = list[k];
 i++;
 }
 }
 for (k = low; k <= high; k++)
 {
 list[k] = temp[k];
 }
}




3) QUICK SORT ALGORITHM.
CODE: 
#include <stdio.h>
void quicksort (int [], int, int);
int main()
{
int list[50];
int size, i;
printf("Enter the number of elements: ");
scanf("%d", &size); 
printf("Enter the elements to be sorted:\n");
for (i = 0; i < size; i++)
{
scanf("%d", &list[i]);
} 
quicksort(list, 0, size - 1);
printf("After applying quick sort\n");
for (i = 0; i < size; i++)
{
printf("%d ", list[i]);
}
printf("\n");
return 0;
}
void quicksort(int list[], int low, int high)
{
int pivot, i, j, temp;
if (low < high)
{
pivot = low;
i = low;
j = high;
while (i < j) 
{
while (list[i] <= list[pivot] && i <= high)
{
i++;
}
while (list[j] > list[pivot] && j >= low)
{
j--;
}
if (i < j)
{
temp = list[i];
list[i] = list[j];
list[j] = temp;
}
}
temp = list[j];
list[j] = list[pivot];
list[pivot] = temp;
quicksort(list, low, j - 1);
quicksort(list, j + 1, high);
}
}




4) MAXIMUM AND MINIMUM ELEMENT OF AN ARRAY.
CODE:
#include <stdio.h>
#define MAX_SIZE 100 
int maximum(int array[], int index, int len);
int minimum(int array[], int index, int len);
int main()
{
int array[MAX_SIZE], N, max, min;
int i;
printf("Enter size of the array: ");
scanf("%d", &N);
printf("Enter %d elements in array: ", N);
for(i=0; i<N; i++)
{
scanf("%d", &array[i]);
}
max = maximum(array, 0, N);
min = minimum(array, 0, N);
printf("Minimum element in array = %d\n", min);
printf("Maximum element in array = %d\n", max);
return 0;
}
int maximum(int array[], int index, int len)
{
int max;
if(index >= len-2)
return (array[index] > array[index + 1])
? array[index]
: array[index + 1];
max = maximum(array, index + 1, len);
return (array[index] > max)
? array[index]
: max;
}
int minimum(int array[], int index, int len)
{
int min;
if(index >= len-2)
{
return (array[index] < array[index + 1])
? array[index]
: array[index + 1];
}
min = minimum(array, index + 1, len);
return (array[index] < min)
? array[index]
: min;
}




5) MATRIX CHAIN MULTIPLICATION (MINIMUM NUMBER OF SCALAR MULTIPLICATIONS NEEDED).
CODE:
#include<stdio.h>
#include<limits.h>
int MatrixChainMultiplication(int p[], int n)
{
int m[n][n];
int i, j, k, L, q;
for (i=1; i<n; i++)
m[i][i] = 0; 
for (L=2; L<n; L++)
{
for (i=1; i<n-L+1; i++)
{
j = i+L-1;
m[i][j] = INT_MAX; 
for (k=i; k<=j-1; k++)
{
q = m[i][k] + m[k+1][j] + p[i-1]*p[k]*p[j];
if (q < m[i][j])
{
m[i][j] = q; 
}
}
}
}
return m[1][n-1]; 
}
int main()
{
int n,i;
printf("Enter number of matrices:");
scanf("%d",&n);
n++;
int arr[n];
printf("Enter dimensions \n");
for(i=0;i<n;i++)
{
printf("Enter d%d :: ",i);
scanf("%d",&arr[i]);
}
int size = sizeof(arr)/sizeof(arr[0]);
printf("Minimum number of multiplications is %d ", MatrixChainMultiplication(arr, size));
return 0;
}




6) KNAPSACK OPTIMIZATION PROBLEM.
CODE:
#include <stdio.h>
int main()
{
int capacity, no_items, cur_weight, item;
int used[10];
float total_profit;
int i;
int weight[10];
int value[10];
printf("Enter the capacity of knapsack:\n");
scanf("%d", &capacity);
printf("Enter the number of items:\n");
scanf("%d", &no_items);
printf("Enter the weight and value of %d item:\n", no_items);
for (i = 0; i < no_items; i++)
{
printf("Weight[%d]:\t", i);
scanf("%d", &weight[i]);
printf("Value[%d]:\t", i);
scanf("%d", &value[i]);
}
for (i = 0; i < no_items; ++i)
used[i] = 0;
cur_weight = capacity;
while (cur_weight > 0)
{
item = -1;
for (i = 0; i < no_items; ++i)
if ((used[i] == 0) &&
((item == -1) || ((float) value[i] / weight[i] > (float) value[item] / weight[item])))
item = i;
used[item] = 1;
cur_weight -= weight[item];
total_profit += value[item];
if (cur_weight >= 0)
printf("Added object %d (%d Rs., %dKg) completely in the bag. Space left: %d.\n", item + 1, 
value[item], weight[item], cur_weight);
else
{
int item_percent = (int) ((1 + (float) cur_weight / weight[item]) * 100);
printf("Added %d%% (%d Rs., %dKg) of object %d in the bag.\n", item_percent, value[item], 
weight[item], item + 1);
total_profit -= value[item];
total_profit += (1 + (float)cur_weight / weight[item]) * value[item];
}
}
printf("Filled the bag with objects worth %.2f Rs.\n", total_profit);
}




7) JOB SEQUENCING WITH DEADLINES.
CODE:
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
// A structure to represent a job
typedef struct Job {
char id; // Job Id
int dead; // Deadline of job
int profit; // Profit if job is over before or on deadline
} Job;
// This function is used for sorting all jobs according to
// profit
int compare(const void* a, const void* b)
{
Job* temp1 = (Job*)a;
Job* temp2 = (Job*)b;
return (temp2->profit - temp1->profit);
}
// Find minimum between two numbers.
int min(int num1, int num2)
{
return (num1 > num2) ? num2 : num1;
}
// Returns minimum number of platforms required
void printJobScheduling(Job arr[], int n)
{
// Sort all jobs according to decreasing order of profit
qsort(arr, n, sizeof(Job), compare);
// sort(arr, arr+n, comparison);
int result[n]; // To store result (Sequence of jobs)
bool slot[n]; // To keep track of free time slots
// Initialize all slots to be free
for (int i = 0; i < n; i++)
slot[i] = false;
// Iterate through all given jobs
for (int i = 0; i < n; i++) {
// Find a free slot for this job (Note that we start
// from the last possible slot)
for (int j = min(n, arr[i].dead) - 1; j >= 0; j--) {
// Free slot found
if (slot[j] == false) {
result[j] = i; // Add this job to result
slot[j] = true; // Make this slot occupied
break;
}
}
}
// Print the result
for (int i = 0; i < n; i++)
if (slot[i])
printf("%c ", arr[result[i]].id);
}
// Driver code
int main()
{
Job arr[] = { { 'a', 2, 100 },
{ 'b', 1, 19 },
{ 'c', 2, 27 },
{ 'd', 1, 25 },
{ 'e', 3, 15 } };
int n = sizeof(arr) / sizeof(arr[0]);
printf(
"Following is maximum profit sequence of jobs \n");
// Function call
printJobScheduling(arr, n);
return 0;
}




8) BFS ALGORITHM.
CODE:
#include<stdio.h>
#include<conio.h>
int a[20][20], q[20], visited[20], n, i, j, f = 0, r = -1;
void bfs(int v) {
for(i = 1; i <= n; i++)
if(a[v][i] && !visited[i])
q[++r] = i;
if(f <= r) {
visited[q[f]] = 1;
bfs(q[f++]);
}
}
int main() {
int v;
printf("Enter the number of vertices: ");
scanf("%d",&n);
for(i=1; i <= n; i++) {
q[i] = 0;
visited[i] = 0;
}
printf("\nEnter graph data in matrix form:\n");
for(i=1; i<=n; i++) {
for(j=1;j<=n;j++) {
scanf("%d", &a[i][j]);
}
}
printf("Enter the starting vertex: ");
scanf("%d", &v);
bfs(v);
printf("\nThe node which are reachable are:");
for(i=1; i <= n; i++) {
if(visited[i])
printf(" %d", i);
else {
printf("\nBFS is not possible. All nodes are not reachable!");
break;
}
}
getch();
}




9) DFS ALGORITHM.
CODE:
#include<stdio.h>
void DFS(int);
int G[10][10],visited[10],n; 
int main()
{
int i,j;
printf("Enter number of vertices:");
scanf("%d",&n);
printf("\nEnter adjecency matrix of the graph:");
for(i=0;i<n;i++)
for(j=0;j<n;j++)
scanf("%d",&G[i][j]);
for(i=0;i<n;i++)
visited[i]=0;
DFS(0);
}
void DFS(int i)
{
int j;
printf("\n%d",i);
visited[i]=1;
for(j=0;j<n;j++)
if(!visited[j]&&G[i][j]==1)
DFS(j);
}




10) PRIM'S ALGORITHM.
CODE:
#include<stdio.h>
#include<stdlib.h>
#define infinity 9999
#define MAX 20
int G[MAX][MAX],spanning[MAX][MAX],n;
int prims();
int main()
{
int i,j,total_cost;
printf("Enter no. of vertices:");
scanf("%d",&n);
printf("\nEnter the adjacency matrix:\n");
for(i=0;i<n;i++)
for(j=0;j<n;j++)
scanf("%d",&G[i][j]);
total_cost=prims();
printf("\nspanning tree matrix:\n");
for(i=0;i<n;i++)
{
printf("\n");
for(j=0;j<n;j++)
printf("%d\t",spanning[i][j]);
}
printf("\n\nTotal cost of spanning tree=%d",total_cost);
return 0;
}
int prims()
{
int cost[MAX][MAX];
int u,v,min_distance,distance[MAX],from[MAX];
int visited[MAX],no_of_edges,i,min_cost,j;
//create cost[][] matrix,spanning[][]
for(i=0;i<n;i++)
for(j=0;j<n;j++)
{
if(G[i][j]==0)
cost[i][j]=infinity;
else
cost[i][j]=G[i][j];
spanning[i][j]=0;
}
//initialise visited[],distance[] and from[]
distance[0]=0;
visited[0]=1;
for(i=1;i<n;i++)
{
distance[i]=cost[0][i];
from[i]=0;
visited[i]=0;
}
min_cost=0; //cost of spanning tree
no_of_edges=n-1; //no. of edges to be added
while(no_of_edges>0)
{
//find the vertex at minimum distance from the tree
min_distance=infinity;
for(i=1;i<n;i++)
if(visited[i]==0&&distance[i]<min_distance)
{
v=i;
min_distance=distance[i];
}
u=from[v];
//insert the edge in spanning tree
spanning[u][v]=distance[v];
spanning[v][u]=distance[v];
no_of_edges--;
visited[v]=1;
//updated the distance[] array
for(i=1;i<n;i++)
if(visited[i]==0&&cost[i][v]<distance[i])
{
distance[i]=cost[i][v];
from[i]=v;
}
min_cost=min_cost+cost[u][v];
}
return(min_cost);
}




11) KRUSKAL'S ALGORITHM.
CODE:
#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
int i,j,k,a,b,u,v,n,ne=1;
int min,mincost=0,cost[9][9],parent[9];
int find(int);
int uni(int,int);
int main()
{
printf("\n\t Implementation of Kruskal's algorithm\n");
printf("\n Enter the no. of vertices:");
scanf("%d",&n);
printf("\n Enter the cost adjacency matrix:\n");
for(i=1;i<=n;i++)
{
for(j=1;j<=n;j++)
{
scanf("%d",&cost[i][j]);
if(cost[i][j]==0)
cost[i][j]=999;
}
}
printf("The edges of Minimum Cost Spanning Tree are\n");
while(ne < n)
{
for(i=1,min=999;i<=n;i++)
{
for(j=1;j <= n;j++)
{
if(cost[i][j] < min)
{
min=cost[i][j];
a=u=i;
b=v=j;
}
}
}
u=find(u);
v=find(v);
if(uni(u,v))
{
printf("%d edge (%d,%d) =%d\n",ne++,a,b,min);
mincost +=min;
}
cost[a][b]=cost[b][a]=999;
}
printf("\n\t Minimum cost = %d\n",mincost);
getch();
}
int find(int i)
{
while(parent[i])
i=parent[i];
return i;
}
int uni(int i,int j)
{
if(i!=j)
{
parent[j]=i;
return 1;
}
return 0;
}




12) DIJKSTRA'S ALGORITHM.
CODE:
#include<stdio.h>
#include<conio.h>
#define INFINITY 9999
#define MAX 10
void dijikstra(int G[MAX][MAX], int n, int startnode);
int main(){
int G[MAX][MAX], i, j, n, u;
printf("\nEnter the no. of vertices:: ");
scanf("%d", &n);
printf("\nEnter the adjacency matrix::\n");
for(i=0;i < n;i++)
for(j=0;j < n;j++)
scanf("%d", &G[i][j]);
printf("\nEnter the starting node:: ");
scanf("%d", &u);
dijikstra(G,n,u);
getch();
}
void dijikstra(int G[MAX][MAX], int n, int startnode)
{
int cost[MAX][MAX], distance[MAX], pred[MAX];
int visited[MAX], count, mindistance, nextnode, i,j;
for(i=0;i < n;i++)
for(j=0;j < n;j++)
if(G[i][j]==0)
cost[i][j]=INFINITY;
else
cost[i][j]=G[i][j];
for(i=0;i< n;i++)
{
distance[i]=cost[startnode][i];
pred[i]=startnode;
visited[i]=0;
}
distance[startnode]=0;
visited[startnode]=1;
count=1;
while(count < n-1){
mindistance=INFINITY;
for(i=0;i < n;i++)
if(distance[i] < mindistance&&!visited[i])
{
mindistance=distance[i];
nextnode=i;
}
visited[nextnode]=1;
for(i=0;i < n;i++)
if(!visited[i])
if(mindistance+cost[nextnode][i] < distance[i])
{
distance[i]=mindistance+cost[nextnode][i];
pred[i]=nextnode;
}
count++;
}
for(i=0;i < n;i++)
if(i!=startnode)
{
printf("\nDistance of %d = %d", i, distance[i]);
printf("\nPath = %d", i);
j=i;
do
{
j=pred[j];
printf(" <-%d", j);
}
while(j!=startnode);
}
}




13) BELLMAN-FORD ALGORITHM.
CODE:
#include <stdio.h>
#include <stdlib.h>
int Bellman_Ford(int G[20][20] , int V, int E, int edge[20][2])
{
 int i,u,v,k,distance[20],parent[20],S,flag=1;
 for(i=0;i<V;i++)
 distance[i] = 1000 , parent[i] = -1 ;
 printf("Enter source: ");
 scanf("%d",&S);
 distance[S-1]=0 ;
 for(i=0;i<V-1;i++)
 {
 for(k=0;k<E;k++)
 {
 u = edge[k][0] , v = edge[k][1] ;
 if(distance[u]+G[u][v] < distance[v])
 distance[v] = distance[u] + G[u][v] , parent[v]=u ;
 }
 }
 for(k=0;k<E;k++)
 {
 u = edge[k][0] , v = edge[k][1] ;
 if(distance[u]+G[u][v] < distance[v])
 flag = 0 ;
 }
 if(flag)
 for(i=0;i<V;i++)
 printf("Vertex %d -> cost = %d parent = %d\n",i+1,distance[i],parent[i]+1);
 return flag;
}
int main()
{
 int V,edge[20][2],G[20][20],i,j,k=0;
 printf("BELLMAN FORD\n");
 printf("Enter no. of vertices: ");
 scanf("%d",&V);
 printf("Enter graph in matrix form:\n");
 for(i=0;i<V;i++)
 for(j=0;j<V;j++)
 {
 scanf("%d",&G[i][j]);
 if(G[i][j]!=0)
 edge[k][0]=i,edge[k++][1]=j;
 }
 if(Bellman_Ford(G,V,k,edge))
 printf("\nNo negative weight cycle\n");
 else printf("\nNegative weight cycle exists\n");
 return 0;
}




14) FLOYD AND WARSHALL ALGORITHM.
CODE:
#include<stdio.h>
void floyd(int a[4][4], int n)
{
for(int k=0;k<n;k++)
{
for(int i=0;i<n;i++)
{
for(int j=0;j<n;j++)
{
if(a[i][j]>a[i][k]+a[k][j])
{
a[i][j]=a[i][k]+a[k][j];
}
 }
 }
}
printf("All Pairs Shortest Path is :\n");
for(int i=0;i<n;i++)
 {
 for(int j=0;j<n;j++)
 {
 printf("%d ",a[i][j]);
}
 printf("\n");
}
}
int main()
{
int cost[4][4] = {{0, 3, 999, 4}, {8, 0, 2, 999}, {5, 999, 0, 1}, {2, 999, 999, 0}}; 
int n = 4;
floyd(cost,n);
}







